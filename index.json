{
  "stats": {
    "suites": 8,
    "tests": 66,
    "passes": 33,
    "pending": 0,
    "failures": 4,
    "start": "2021-06-22T19:22:40.514Z",
    "end": "2021-06-22T19:24:08.586Z",
    "duration": 24865,
    "testsRegistered": 66,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 29,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "2a3cfac6-c8de-4634-aac7-4ec7f12c7683",
      "title": "",
      "fullFile": "cypress/integration/aliasing.spec.js",
      "file": "cypress/integration/aliasing.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "350e1e22-e3b8-4970-8e08-c2f6d9a1e433",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 334,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn'); // when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/aliasing\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Aliasing`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/aliasing\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Aliasing`\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138905:23\n    at visitFailedByErr (http://localhost:55081/__cypress/runner/cypress_runner.js:138264:12)\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138904:11\n    at tryCatcher (http://localhost:55081/__cypress/runner/cypress_runner.js:10798:23)\n    at Promise._settlePromiseFromHandler (http://localhost:55081/__cypress/runner/cypress_runner.js:8733:31)\n    at Promise._settlePromise (http://localhost:55081/__cypress/runner/cypress_runner.js:8790:18)\n    at Promise._settlePromise0 (http://localhost:55081/__cypress/runner/cypress_runner.js:8835:10)\n    at Promise._settlePromises (http://localhost:55081/__cypress/runner/cypress_runner.js:8911:18)\n    at _drainQueueStep (http://localhost:55081/__cypress/runner/cypress_runner.js:5505:12)\n    at _drainQueue (http://localhost:55081/__cypress/runner/cypress_runner.js:5498:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5514:5)\n    at Async.drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5384:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:55081/__cypress/tests?p=cypress\\integration\\aliasing.spec.js:102:8)\n\nFrom Node.js Internals:\n  Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\n  Proxy-Authenticate: NEGOTIATE\r\n  Proxy-Authenticate: NTLM\r\n  Proxy-Authenticate: BASIC realm=\"BCAAA\"\r\n  Cache-Control: no-cache\r\n  Pragma: no-cache\r\n  Content-Type: text/html; charset=utf-8\r\n  Proxy-Connection: close\r\n  Connection: close\r\n  Content-Length: 813\r\n  \r\n  <HTML><HEAD>\n  <TITLE>Access Denied</TITLE>\n  </HEAD>\n  <BODY>\n  <FONT face=\"Helvetica\">\n  <big><strong></strong></big><BR>\n  </FONT>\n  <blockquote>\n  <TABLE border=0 cellPadding=1 width=\"80%\">\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  <big>Access Denied (authentication_failed)</big>\n  <BR>\n  <BR>\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  Your credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  This is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\" SIZE=2>\n  <BR>\n  For assistance, contact your network support team.\n  </FONT>\n  </TD></TR>\n  </TABLE>\n  </blockquote>\n  </FONT>\n  </BODY></HTML>\n  \n      at Socket.onData (C:\\Users\\sraqxg\\AppData\\Local\\Cypress\\Cache\\7.5.0\\Cypress\\resources\\app\\packages\\network\\lib\\agent.js:237:31)\n      at Object.onceWrapper (events.js:422:26)\n      at Socket.emit (events.js:315:20)\n      at addChunk (_stream_readable.js:309:12)\n      at readableAddChunk (_stream_readable.js:284:9)\n      at Socket.Readable.push (_stream_readable.js:223:10)\n      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)\n  ",
                "diff": null
              },
              "uuid": "30e8f020-c133-45ee-9eef-2ec58ae472e3",
              "parentUUID": "350e1e22-e3b8-4970-8e08-c2f6d9a1e433",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "3f39f24d-d59d-4094-880e-d3e18c2009d1",
              "parentUUID": "350e1e22-e3b8-4970-8e08-c2f6d9a1e433",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "30e8f020-c133-45ee-9eef-2ec58ae472e3"
          ],
          "pending": [],
          "skipped": [
            "3f39f24d-d59d-4094-880e-d3e18c2009d1"
          ],
          "duration": 334,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "19dee1b5-1821-4c33-8661-8ab1e2ed5cce",
      "title": "",
      "fullFile": "cypress/integration/assertions.spec.js",
      "file": "cypress/integration/assertions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4bbde6b8-aaf5-4b54-911b-08c87bd3dfdb",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3ed5214f-19bf-421a-95ad-d8f77ddc0ed9",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 347,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first() // checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content') // chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td') // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last') // finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible'); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {
                    "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/assertions\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Assertions`",
                    "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/assertions\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Assertions`\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138905:23\n    at visitFailedByErr (http://localhost:55081/__cypress/runner/cypress_runner.js:138264:12)\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138904:11\n    at tryCatcher (http://localhost:55081/__cypress/runner/cypress_runner.js:10798:23)\n    at Promise._settlePromiseFromHandler (http://localhost:55081/__cypress/runner/cypress_runner.js:8733:31)\n    at Promise._settlePromise (http://localhost:55081/__cypress/runner/cypress_runner.js:8790:18)\n    at Promise._settlePromise0 (http://localhost:55081/__cypress/runner/cypress_runner.js:8835:10)\n    at Promise._settlePromises (http://localhost:55081/__cypress/runner/cypress_runner.js:8911:18)\n    at _drainQueueStep (http://localhost:55081/__cypress/runner/cypress_runner.js:5505:12)\n    at _drainQueue (http://localhost:55081/__cypress/runner/cypress_runner.js:5498:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5514:5)\n    at Async.drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5384:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:55081/__cypress/tests?p=cypress\\integration\\assertions.spec.js:102:8)\n\nFrom Node.js Internals:\n  Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\n  Proxy-Authenticate: NEGOTIATE\r\n  Proxy-Authenticate: NTLM\r\n  Proxy-Authenticate: BASIC realm=\"BCAAA\"\r\n  Cache-Control: no-cache\r\n  Pragma: no-cache\r\n  Content-Type: text/html; charset=utf-8\r\n  Proxy-Connection: close\r\n  Connection: close\r\n  Content-Length: 813\r\n  \r\n  <HTML><HEAD>\n  <TITLE>Access Denied</TITLE>\n  </HEAD>\n  <BODY>\n  <FONT face=\"Helvetica\">\n  <big><strong></strong></big><BR>\n  </FONT>\n  <blockquote>\n  <TABLE border=0 cellPadding=1 width=\"80%\">\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  <big>Access Denied (authentication_failed)</big>\n  <BR>\n  <BR>\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  Your credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  This is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\" SIZE=2>\n  <BR>\n  For assistance, contact your network support team.\n  </FONT>\n  </TD></TR>\n  </TABLE>\n  </blockquote>\n  </FONT>\n  </BODY></HTML>\n  \n      at Socket.onData (C:\\Users\\sraqxg\\AppData\\Local\\Cypress\\Cache\\7.5.0\\Cypress\\resources\\app\\packages\\network\\lib\\agent.js:237:31)\n      at Object.onceWrapper (events.js:422:26)\n      at Socket.emit (events.js:315:20)\n      at addChunk (_stream_readable.js:309:12)\n      at readableAddChunk (_stream_readable.js:284:9)\n      at Socket.Readable.push (_stream_readable.js:223:10)\n      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)\n  ",
                    "diff": null
                  },
                  "uuid": "e3afde40-e9a6-4160-9c94-dd1b724de775",
                  "parentUUID": "3ed5214f-19bf-421a-95ad-d8f77ddc0ed9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "32b39b81-7dca-4ff1-ae80-36b253db1909",
                  "parentUUID": "3ed5214f-19bf-421a-95ad-d8f77ddc0ed9",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e3afde40-e9a6-4160-9c94-dd1b724de775"
              ],
              "pending": [],
              "skipped": [
                "32b39b81-7dca-4ff1-ae80-36b253db1909"
              ],
              "duration": 347,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79ceb044-b6ef-4e61-a696-b77bced3cec2",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n}); // matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "46aa4b0a-e0d6-4148-80e4-b2375ebaaf22",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  // @ts-ignore TS6133 unused variable\n  const texts = $p.map((i, el) => Cypress.$(el).text()); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "ef8c5a1e-fd50-4aa9-bfdf-7bc556b5e4a2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div') // .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "047f1a02-c151-49e7-aa68-4f355675b46e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "d726806e-143e-4fd6-9894-107e248968ff",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "7d8c11d9-ec13-47e9-afc3-da8baeb8df19",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "bd23fb92-833e-4d62-bad2-731a13a96c00",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "3c2df186-c76c-4ade-9795-34fed9645f36",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "46aa4b0a-e0d6-4148-80e4-b2375ebaaf22",
                "ef8c5a1e-fd50-4aa9-bfdf-7bc556b5e4a2",
                "047f1a02-c151-49e7-aa68-4f355675b46e",
                "d726806e-143e-4fd6-9894-107e248968ff",
                "7d8c11d9-ec13-47e9-afc3-da8baeb8df19",
                "bd23fb92-833e-4d62-bad2-731a13a96c00",
                "3c2df186-c76c-4ade-9795-34fed9645f36"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "61d5be2e-81ce-4c97-a8fc-6ff278c60723",
      "title": "",
      "fullFile": "cypress/integration/connectors.spec.js",
      "file": "cypress/integration/connectors.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f817818-6704-4641-8368-096544b56820",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 344,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/connectors\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Connectors`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/connectors\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Connectors`\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138905:23\n    at visitFailedByErr (http://localhost:55081/__cypress/runner/cypress_runner.js:138264:12)\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138904:11\n    at tryCatcher (http://localhost:55081/__cypress/runner/cypress_runner.js:10798:23)\n    at Promise._settlePromiseFromHandler (http://localhost:55081/__cypress/runner/cypress_runner.js:8733:31)\n    at Promise._settlePromise (http://localhost:55081/__cypress/runner/cypress_runner.js:8790:18)\n    at Promise._settlePromise0 (http://localhost:55081/__cypress/runner/cypress_runner.js:8835:10)\n    at Promise._settlePromises (http://localhost:55081/__cypress/runner/cypress_runner.js:8911:18)\n    at _drainQueueStep (http://localhost:55081/__cypress/runner/cypress_runner.js:5505:12)\n    at _drainQueue (http://localhost:55081/__cypress/runner/cypress_runner.js:5498:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5514:5)\n    at Async.drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5384:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:55081/__cypress/tests?p=cypress\\integration\\connectors.spec.js:102:8)\n\nFrom Node.js Internals:\n  Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\n  Proxy-Authenticate: NEGOTIATE\r\n  Proxy-Authenticate: NTLM\r\n  Proxy-Authenticate: BASIC realm=\"BCAAA\"\r\n  Cache-Control: no-cache\r\n  Pragma: no-cache\r\n  Content-Type: text/html; charset=utf-8\r\n  Proxy-Connection: close\r\n  Connection: close\r\n  Content-Length: 813\r\n  \r\n  <HTML><HEAD>\n  <TITLE>Access Denied</TITLE>\n  </HEAD>\n  <BODY>\n  <FONT face=\"Helvetica\">\n  <big><strong></strong></big><BR>\n  </FONT>\n  <blockquote>\n  <TABLE border=0 cellPadding=1 width=\"80%\">\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  <big>Access Denied (authentication_failed)</big>\n  <BR>\n  <BR>\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  Your credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  This is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\" SIZE=2>\n  <BR>\n  For assistance, contact your network support team.\n  </FONT>\n  </TD></TR>\n  </TABLE>\n  </blockquote>\n  </FONT>\n  </BODY></HTML>\n  \n      at Socket.onData (C:\\Users\\sraqxg\\AppData\\Local\\Cypress\\Cache\\7.5.0\\Cypress\\resources\\app\\packages\\network\\lib\\agent.js:237:31)\n      at Object.onceWrapper (events.js:422:26)\n      at Socket.emit (events.js:315:20)\n      at addChunk (_stream_readable.js:309:12)\n      at readableAddChunk (_stream_readable.js:284:9)\n      at Socket.Readable.push (_stream_readable.js:223:10)\n      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)\n  ",
                "diff": null
              },
              "uuid": "e052ba54-b008-4080-bd24-df19a099296c",
              "parentUUID": "3f817818-6704-4641-8368-096544b56820",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li') // calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "e6073bfe-5c37-40be-818e-1ff32b22c0d9",
              "parentUUID": "3f817818-6704-4641-8368-096544b56820",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\n// https://on.cypress.io/invoke\ncy.get('.connectors-div').should('be.hidden') // call the jquery method 'show' on the 'div.container'\n.invoke('show').should('be.visible');",
              "err": {},
              "uuid": "19945f84-136e-4b2b-b665-b54be9411761",
              "parentUUID": "3f817818-6704-4641-8368-096544b56820",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "a4502380-f3f1-46b3-be64-4a484cc0de34",
              "parentUUID": "3f817818-6704-4641-8368-096544b56820",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [
            {
              "uuid": "000a019d-2f36-429f-9852-0896f5782c87",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "8d47e15c-a28f-4e7c-8921-61ef5e3dd6ca",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "06d70ab9-6653-434f-b8d1-8fd322d2bf81",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "f1b936a0-076e-4eb9-8239-f2319c537839",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "99b57fa4-656c-4e32-b7f9-4907f00a6659",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "8d47e15c-a28f-4e7c-8921-61ef5e3dd6ca",
                "06d70ab9-6653-434f-b8d1-8fd322d2bf81",
                "f1b936a0-076e-4eb9-8239-f2319c537839",
                "99b57fa4-656c-4e32-b7f9-4907f00a6659"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [
            "e052ba54-b008-4080-bd24-df19a099296c"
          ],
          "pending": [],
          "skipped": [
            "e6073bfe-5c37-40be-818e-1ff32b22c0d9",
            "19945f84-136e-4b2b-b665-b54be9411761",
            "a4502380-f3f1-46b3-be64-4a484cc0de34"
          ],
          "duration": 344,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "26179f4c-f9c7-4023-ae7f-8026e20584fb",
      "title": "",
      "fullFile": "cypress/integration/actions.spec.js",
      "file": "cypress/integration/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8638e428-9506-4362-bb8e-b7628b844c73",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 5225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "8dacf0ed-b08c-4418-ae1e-5966fca77870",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "dd99f836-e630-4709-bf07-0f8b2ad81d7b",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "bd0bf81e-738d-40b7-bf03-404e1ea0b39d",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 757,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "f48b983a-7185-4a7e-a109-199b11ac10c2",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "039d10e1-e4d3-4c84-be6c-6299d68ad0d5",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "d08ff2da-86d7-48b2-8a24-e6dc63a1cf6a",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "745251c1-2bdc-4e9d-8859-b21950265dce",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "626466a4-9c04-4b12-b4fa-cbf53ff469a6",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "8bd63d03-7736-4066-a446-3d4709bf28d1",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1083,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "91d093ae-fba5-4430-a679-82bab26812c7",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "bc226fb9-cecb-4907-aeaa-81e5b5cd556f",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "55a87b01-1c67-4a1b-a94f-10fb9a130c85",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "cbf5b77b-c131-48e7-a805-dae976fe9d2a",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "ac30cea5-4f2f-4f79-9eba-d5b054307f94",
              "parentUUID": "8638e428-9506-4362-bb8e-b7628b844c73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8dacf0ed-b08c-4418-ae1e-5966fca77870",
            "dd99f836-e630-4709-bf07-0f8b2ad81d7b",
            "bd0bf81e-738d-40b7-bf03-404e1ea0b39d",
            "f48b983a-7185-4a7e-a109-199b11ac10c2",
            "039d10e1-e4d3-4c84-be6c-6299d68ad0d5",
            "d08ff2da-86d7-48b2-8a24-e6dc63a1cf6a",
            "745251c1-2bdc-4e9d-8859-b21950265dce",
            "626466a4-9c04-4b12-b4fa-cbf53ff469a6",
            "8bd63d03-7736-4066-a446-3d4709bf28d1",
            "91d093ae-fba5-4430-a679-82bab26812c7",
            "bc226fb9-cecb-4907-aeaa-81e5b5cd556f",
            "55a87b01-1c67-4a1b-a94f-10fb9a130c85",
            "cbf5b77b-c131-48e7-a805-dae976fe9d2a",
            "ac30cea5-4f2f-4f79-9eba-d5b054307f94"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14420,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fedc1bc3-141d-4d7e-9929-931fabf43507",
      "title": "",
      "fullFile": "cypress/integration/aliasing.spec.js",
      "file": "cypress/integration/aliasing.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8c51f49f-15a5-4c6d-bc20-46d6a3525936",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 773,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn'); // when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "4f4d734b-fc1d-4d2e-8da9-5920b489f484",
              "parentUUID": "8c51f49f-15a5-4c6d-bc20-46d6a3525936",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 1279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "cda61868-5865-4b58-8d9b-be4ab6219866",
              "parentUUID": "8c51f49f-15a5-4c6d-bc20-46d6a3525936",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f4d734b-fc1d-4d2e-8da9-5920b489f484",
            "cda61868-5865-4b58-8d9b-be4ab6219866"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2052,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0cf7988a-b33f-4698-a58e-3ba6f9e3cc5b",
      "title": "",
      "fullFile": "cypress/integration/assertions.spec.js",
      "file": "cypress/integration/assertions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6f456051-c7e5-4b70-afea-4e626f0c1513",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "458b3768-80ea-4428-9268-7cd5166d41d6",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 1794,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first() // checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content') // chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td') // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last') // finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible'); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "be58baf6-9126-4333-a1a2-f27501707db7",
                  "parentUUID": "458b3768-80ea-4428-9268-7cd5166d41d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "f1b9c8c8-3a64-47a9-ae93-8888c3bf567f",
                  "parentUUID": "458b3768-80ea-4428-9268-7cd5166d41d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be58baf6-9126-4333-a1a2-f27501707db7",
                "f1b9c8c8-3a64-47a9-ae93-8888c3bf567f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 201,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n}); // matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "bd2b69ca-3450-4848-be1a-9725bdbb470d",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  // @ts-ignore TS6133 unused variable\n  const texts = $p.map((i, el) => Cypress.$(el).text()); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "63e31728-90b1-4223-a157-f3152867def8",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div') // .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "8c05edd1-1e26-4322-bc3b-9b131bbffe60",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "b51fa94b-9bc5-461d-ac57-d927bbf49633",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "cd99922e-cf4d-45e7-87c0-3cbdd5cafcfd",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "8b7c5dee-9448-4060-8bda-767a2dab7d35",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1666,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "103b3760-2b03-4245-9680-ef9b7e8771b3",
                  "parentUUID": "252b3a02-228e-41d5-942b-fe9eeea7c0fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd2b69ca-3450-4848-be1a-9725bdbb470d",
                "63e31728-90b1-4223-a157-f3152867def8",
                "8c05edd1-1e26-4322-bc3b-9b131bbffe60",
                "b51fa94b-9bc5-461d-ac57-d927bbf49633",
                "cd99922e-cf4d-45e7-87c0-3cbdd5cafcfd",
                "8b7c5dee-9448-4060-8bda-767a2dab7d35",
                "103b3760-2b03-4245-9680-ef9b7e8771b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2871,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6905ddd4-1707-4750-b2a7-7c806c6a4266",
      "title": "",
      "fullFile": "cypress/integration/connectors.spec.js",
      "file": "cypress/integration/connectors.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ee2a3aa6-4d83-4a40-9930-cdbdd459a243",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 688,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "c4e438da-5d2c-4087-a9c1-9ae4a8e19e1f",
              "parentUUID": "ee2a3aa6-4d83-4a40-9930-cdbdd459a243",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li') // calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "808f1863-721c-4712-80da-38b88dc7cdcb",
              "parentUUID": "ee2a3aa6-4d83-4a40-9930-cdbdd459a243",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\n// https://on.cypress.io/invoke\ncy.get('.connectors-div').should('be.hidden') // call the jquery method 'show' on the 'div.container'\n.invoke('show').should('be.visible');",
              "err": {},
              "uuid": "81ed1dac-2868-4798-87b3-e325b1a2413c",
              "parentUUID": "ee2a3aa6-4d83-4a40-9930-cdbdd459a243",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "ba23b320-ba32-4122-870d-5ea8d57e7b41",
              "parentUUID": "ee2a3aa6-4d83-4a40-9930-cdbdd459a243",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "75e74fd8-46d6-4368-9321-babddd58033f",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "2aa6f1c6-d8f8-4366-ba50-2cf5d7a1b968",
                  "parentUUID": "75e74fd8-46d6-4368-9321-babddd58033f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "bc0bfd37-8d3d-456b-9024-c007ff3687f4",
                  "parentUUID": "75e74fd8-46d6-4368-9321-babddd58033f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "93f3c7d2-2b06-40f4-be13-efa66fb90ff3",
                  "parentUUID": "75e74fd8-46d6-4368-9321-babddd58033f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "785a68af-0063-42a5-ab36-7bf6bcfd3289",
                  "parentUUID": "75e74fd8-46d6-4368-9321-babddd58033f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2aa6f1c6-d8f8-4366-ba50-2cf5d7a1b968",
                "bc0bfd37-8d3d-456b-9024-c007ff3687f4",
                "93f3c7d2-2b06-40f4-be13-efa66fb90ff3",
                "785a68af-0063-42a5-ab36-7bf6bcfd3289"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 765,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "c4e438da-5d2c-4087-a9c1-9ae4a8e19e1f",
            "808f1863-721c-4712-80da-38b88dc7cdcb",
            "81ed1dac-2868-4798-87b3-e325b1a2413c",
            "ba23b320-ba32-4122-870d-5ea8d57e7b41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1285,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0e9d4de0-6a9d-4728-9205-92adcdc56749",
      "title": "",
      "fullFile": "cypress/integration/actions.spec.js",
      "file": "cypress/integration/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 428,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/actions\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Actions`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://example.cypress.io/commands/actions\n\nWe attempted to make an http request to this URL but the request failed without a response.\n\nWe received this error at the network level:\n\n  > Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\nProxy-Authenticate: NEGOTIATE\r\nProxy-Authenticate: NTLM\r\nProxy-Authenticate: BASIC realm=\"BCAAA\"\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nProxy-Connection: close\r\nConnection: close\r\nContent-Length: 813\r\n\r\n<HTML><HEAD>\n<TITLE>Access Denied</TITLE>\n</HEAD>\n<BODY>\n<FONT face=\"Helvetica\">\n<big><strong></strong></big><BR>\n</FONT>\n<blockquote>\n<TABLE border=0 cellPadding=1 width=\"80%\">\n<TR><TD>\n<FONT face=\"Helvetica\">\n<big>Access Denied (authentication_failed)</big>\n<BR>\n<BR>\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nYour credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\">\nThis is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n</FONT>\n</TD></TR>\n<TR><TD>\n<FONT face=\"Helvetica\" SIZE=2>\n<BR>\nFor assistance, contact your network support team.\n</FONT>\n</TD></TR>\n</TABLE>\n</blockquote>\n</FONT>\n</BODY></HTML>\n\nCommon situations why this would fail:\n  - you don't have internet access\n  - you forgot to run / boot your web server\n  - your web server isn't accessible\n  - you have weird network configuration settings on your computer\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Actions`\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138905:23\n    at visitFailedByErr (http://localhost:55081/__cypress/runner/cypress_runner.js:138264:12)\n    at http://localhost:55081/__cypress/runner/cypress_runner.js:138904:11\n    at tryCatcher (http://localhost:55081/__cypress/runner/cypress_runner.js:10798:23)\n    at Promise._settlePromiseFromHandler (http://localhost:55081/__cypress/runner/cypress_runner.js:8733:31)\n    at Promise._settlePromise (http://localhost:55081/__cypress/runner/cypress_runner.js:8790:18)\n    at Promise._settlePromise0 (http://localhost:55081/__cypress/runner/cypress_runner.js:8835:10)\n    at Promise._settlePromises (http://localhost:55081/__cypress/runner/cypress_runner.js:8911:18)\n    at _drainQueueStep (http://localhost:55081/__cypress/runner/cypress_runner.js:5505:12)\n    at _drainQueue (http://localhost:55081/__cypress/runner/cypress_runner.js:5498:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5514:5)\n    at Async.drainQueues (http://localhost:55081/__cypress/runner/cypress_runner.js:5384:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:55081/__cypress/tests?p=cypress\\integration\\actions.spec.js:102:8)\n\nFrom Node.js Internals:\n  Error: Error establishing proxy connection. Response from server was: HTTP/1.1 407 Proxy Authentication Required\r\n  Proxy-Authenticate: NEGOTIATE\r\n  Proxy-Authenticate: NTLM\r\n  Proxy-Authenticate: BASIC realm=\"BCAAA\"\r\n  Cache-Control: no-cache\r\n  Pragma: no-cache\r\n  Content-Type: text/html; charset=utf-8\r\n  Proxy-Connection: close\r\n  Connection: close\r\n  Content-Length: 813\r\n  \r\n  <HTML><HEAD>\n  <TITLE>Access Denied</TITLE>\n  </HEAD>\n  <BODY>\n  <FONT face=\"Helvetica\">\n  <big><strong></strong></big><BR>\n  </FONT>\n  <blockquote>\n  <TABLE border=0 cellPadding=1 width=\"80%\">\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  <big>Access Denied (authentication_failed)</big>\n  <BR>\n  <BR>\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  Your credentials could not be authenticated: \"Credentials are missing.\". You will not be permitted access until your credentials can be verified.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\">\n  This is typically caused by an incorrect username and/or password, but could also be caused by network problems.\n  </FONT>\n  </TD></TR>\n  <TR><TD>\n  <FONT face=\"Helvetica\" SIZE=2>\n  <BR>\n  For assistance, contact your network support team.\n  </FONT>\n  </TD></TR>\n  </TABLE>\n  </blockquote>\n  </FONT>\n  </BODY></HTML>\n  \n      at Socket.onData (C:\\Users\\sraqxg\\AppData\\Local\\Cypress\\Cache\\7.5.0\\Cypress\\resources\\app\\packages\\network\\lib\\agent.js:237:31)\n      at Object.onceWrapper (events.js:422:26)\n      at Socket.emit (events.js:315:20)\n      at addChunk (_stream_readable.js:309:12)\n      at readableAddChunk (_stream_readable.js:284:9)\n      at Socket.Readable.push (_stream_readable.js:223:10)\n      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)\n  ",
                "diff": null
              },
              "uuid": "a342fe0b-e7a1-4bdd-937e-d91fc8647312",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "0f426834-65c1-46e9-bd91-5d264f93156c",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "daa3e259-476b-4f8a-a4fb-3ccb2cbe5f12",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "a0c73a8a-1d23-43f2-82e2-b7ec8e471718",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "bbfa0b5e-0a04-4765-b845-b231346be215",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "52a7a05e-fa95-437f-aaba-a3740e2dd03f",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "3851fa40-5b6a-47cd-b129-a94bc4c4cb73",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "dd7b455b-4c50-4b7e-91d0-936c63d50f95",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "fc31d32c-71f8-42d9-81fb-f440db793cbd",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "aaffc5a4-0501-4793-8b27-4bb495ef4017",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "51a2c8bc-2cb9-42df-9fa0-c0710c0116ed",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "01d8e224-2fa9-460b-a7ef-fddeef50f44b",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "3183308f-24ae-4259-8cd8-d39e7d04414d",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "d21e1f89-879b-4a7d-b5a7-a8407c631c76",
              "parentUUID": "99ef2692-ef16-4028-89e6-5e8bc3f294cb",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a342fe0b-e7a1-4bdd-937e-d91fc8647312"
          ],
          "pending": [],
          "skipped": [
            "0f426834-65c1-46e9-bd91-5d264f93156c",
            "daa3e259-476b-4f8a-a4fb-3ccb2cbe5f12",
            "a0c73a8a-1d23-43f2-82e2-b7ec8e471718",
            "bbfa0b5e-0a04-4765-b845-b231346be215",
            "52a7a05e-fa95-437f-aaba-a3740e2dd03f",
            "3851fa40-5b6a-47cd-b129-a94bc4c4cb73",
            "dd7b455b-4c50-4b7e-91d0-936c63d50f95",
            "fc31d32c-71f8-42d9-81fb-f440db793cbd",
            "aaffc5a4-0501-4793-8b27-4bb495ef4017",
            "51a2c8bc-2cb9-42df-9fa0-c0710c0116ed",
            "01d8e224-2fa9-460b-a7ef-fddeef50f44b",
            "3183308f-24ae-4259-8cd8-d39e7d04414d",
            "d21e1f89-879b-4a7d-b5a7-a8407c631c76"
          ],
          "duration": 428,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}